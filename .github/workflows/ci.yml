name: Continuous integration

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Restore node_modules
      id: node-modules-cache
      uses: actions/cache@v1
      with:
        path: node_modules
        key: v1-${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Restore npm cache
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: v1-${{ runner.os }}-npm-cache-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          v1-${{ runner.os }}-npm-cache-

    - run: npm install
      if: steps.node-modules-cache.outputs.cache-hit != 'true'

  test:
    name: Test
    runs-on: ubuntu-latest

    needs:
      - install

    steps:
    - uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Restore node_modules
      id: node-modules-cache
      uses: actions/cache@v1
      with:
        path: node_modules
        key: v1-${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - run: npm run test
      env:
        CI: true

  build:
    name: Build
    runs-on: ubuntu-latest

    needs:
      - install

    steps:
    - uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Restore node_modules
      id: node-modules-cache
      uses: actions/cache@v1
      with:
        path: node_modules
        key: v1-${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - run: npm run build

    - name: Save build output
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist

  # Publish canary on pull_request update
  publish-canary:
    name: Publish canary version
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'

    needs:
      - install
      - build

    steps:
    - uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
        registry-url: 'https://registry.npmjs.org'

    - name: Restore node_modules
      id: node-modules-cache
      uses: actions/cache@v1
      with:
        path: node_modules
        key: v1-${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Retrieve build output
      uses: actions/download-artifact@v1
      with:
        name: dist

    - name: Compute canary version
      id: compute-version
      env:
        # TODO - concat check-suite run id when added by Github to prevent
        # conflict when re-running workflow on the same commit
        ID: ${{ github.sha }}
      run: |
        CURRENT_VERSION=$(cat package.json | jq -r '.version')
        CANARY_VERSION=$CURRENT_VERSION-canary-$ID

        echo "::set-output name=version::$CANARY_VERSION"

    - name: Bumb version
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        VERSION: ${{ steps.compute-version.outputs.version }}
      run: npm version $VERSION

    - name: Publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish --tag canary

    - name: Comment on PR
      uses: actions/github-script@11098d4ae37fc6df64e290bf7abbe05af685b177
      env:
        VERSION: ${{ steps.compute-version.outputs.version }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const version = process.env.VERSION;
          github.issues.createComment({
            ...context.issue,
            body: 'Canary version `${version}` published ðŸš€',
          })

  # Publish released version on tag push
  publish-tag:
    name: Publish tag version
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')

    needs:
      - install
      - test
      - build

    steps:
    - uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
        registry-url: 'https://registry.npmjs.org'

    - name: Restore node_modules
      id: node-modules-cache
      uses: actions/cache@v1
      with:
        path: node_modules
        key: v1-${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Retrieve build output
      uses: actions/download-artifact@v1
      with:
        name: dist

    - name: Retrieve current tag
      id: extract-tag
      env:
        REF: ${{ github.ref }}
      run: |
        TAG=${REF:10} # remove refs/tags/

        echo "::set-output name=tag::$TAG"

        # if tag is not strickly semver X.Y.X (eg. 0.1.0-alpha.1), set beta output to true
        if (echo "0.0.0-beta" | ggrep -Eq '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$') ; then
          echo "::set-output name=beta::false"
        else
          echo "::set-output name=beta::true"
        fi

    - name: Bumb version
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        VERSION: ${{ steps.extract-tag.outputs.tag }}
      run: npm version $VERSION

    - name: Publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        IS_BETA: ${{ steps.extract-tag.outputs.beta }}
      run: |
        if [ "$IS_BETA" == "true" ]; then
          npm publish --tag beta
        else
          npm publish --tag latest
        fi
